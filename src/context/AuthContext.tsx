
import React, { createContext, useContext, useState, useEffect } from 'react';
import { toast } from '../components/ui/use-toast';

interface User {
  id: string;
  email: string;
  name: string;
  role: 'creator' | 'brand';
  plan: 'free' | 'pro';
  avatar?: string;
}

interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  signup: (email: string, password: string, name: string, role: 'creator' | 'brand') => Promise<void>;
  logout: () => void;
  checkAuthStatus: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  // Check if user is already logged in on component mount
  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem('flaresync_token');
      if (!token) {
        setUser(null);
        setIsLoading(false);
        return;
      }

      // In a real app, you would validate the token with your backend
      // For now, we'll simulate by parsing the stored user data
      const storedUser = localStorage.getItem('flaresync_user');
      if (storedUser) {
        setUser(JSON.parse(storedUser));
      } else {
        // Invalid state: token exists but no user data
        logout();
      }
    } catch (error) {
      console.error('Auth check failed:', error);
      logout();
    } finally {
      setIsLoading(false);
    }
  };

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      // Simulate API call
      // In a real app, you would make a fetch request to your backend
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Validate credentials - in a real app, this would be done by the server
      if (email === 'demo@flaresync.com' && password === 'password') {
        // Mock user for demo purposes
        const mockUser: User = {
          id: '1',
          email: 'demo@flaresync.com',
          name: 'Demo User',
          role: 'creator',
          plan: 'free',
          avatar: 'https://api.dicebear.com/6.x/avataaars/svg?seed=demo'
        };

        // Mock JWT token - in a real app, this would be generated by the server
        const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IkRlbW8gVXNlciIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';

        // Save auth data to localStorage
        localStorage.setItem('flaresync_token', mockToken);
        localStorage.setItem('flaresync_user', JSON.stringify(mockUser));

        setUser(mockUser);
        toast({
          title: "Login successful",
          description: `Welcome back, ${mockUser.name}!`,
        });
        return;
      }
      
      throw new Error('Invalid credentials');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Login failed';
      toast({
        title: "Login failed",
        description: errorMessage,
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const signup = async (email: string, password: string, name: string, role: 'creator' | 'brand') => {
    setIsLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      // In a real app, the server would validate and create the user
      // For demo purposes, we'll create a mock user
      const mockUser: User = {
        id: '2',
        email,
        name,
        role,
        plan: 'free',
        avatar: `https://api.dicebear.com/6.x/avataaars/svg?seed=${email}`
      };

      // Mock JWT token
      const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';

      // Save auth data to localStorage
      localStorage.setItem('flaresync_token', mockToken);
      localStorage.setItem('flaresync_user', JSON.stringify(mockUser));

      setUser(mockUser);
      toast({
        title: "Registration successful",
        description: `Welcome to FlareSync, ${name}!`,
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Registration failed';
      toast({
        title: "Registration failed",
        description: errorMessage,
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('flaresync_token');
    localStorage.removeItem('flaresync_user');
    setUser(null);
    toast({
      title: "Logged out",
      description: "You have been successfully logged out.",
    });
  };

  return (
    <AuthContext.Provider value={{ user, isLoading, login, signup, logout, checkAuthStatus }}>
      {children}
    </AuthContext.Provider>
  );
};
